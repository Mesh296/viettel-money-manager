const { GoogleGenerativeAI } = require('@google/generative-ai');
const dotenv = require('dotenv');
const { Category } = require('../../models');
const transactionService = require('../transactions');
const categoryService = require('../categories');

dotenv.config();

// Kh·ªüi t·∫°o Google Generative AI v·ªõi API key t·ª´ .env
const apiKey = process.env.GEMINI_API_KEY;
if (!apiKey) {
  throw new Error('GEMINI_API_KEY is not defined in environment variables');
}

const genAI = new GoogleGenerativeAI(apiKey);

/**
 * L·∫•y t·∫•t c·∫£ danh m·ª•c ƒë·ªÉ cung c·∫•p cho Gemini l√†m ng·ªØ c·∫£nh
 */
async function getAllCategoriesForContext() {
  try {
    const categories = await Category.findAll();
    return categories.map(cat => ({
      id: cat.id,
      name: cat.name
    }));
  } catch (error) {
    console.error('Error fetching categories for context:', error);
    return [];
  }
}

// ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ giao d·ªãch hi·ªÉn th·ªã ƒë·∫πp h∆°n
function formatTransactionsForChat(transactions) {
  if (!transactions || transactions.length === 0) {
    return "Kh√¥ng t√¨m th·∫•y giao d·ªãch n√†o.";
  }
  
  // N·∫øu qu√° nhi·ªÅu giao d·ªãch, ch·ªâ hi·ªÉn th·ªã m·ªôt s·ªë
  const maxToShow = 5;
  const hasMore = transactions.length > maxToShow;
  const toShow = hasMore ? transactions.slice(0, maxToShow) : transactions;
  
  // Format ƒë∆°n gi·∫£n h∆°n - m·ªói giao d·ªãch tr√™n m·ªôt d√≤ng
  const formattedTransactions = toShow.map((t, idx) => {
    const date = new Date(t.date).toLocaleDateString('vi-VN');
    const amount = new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(t.amount);
    const category = t.category?.name || 'Kh√¥ng c√≥ danh m·ª•c';
    const type = t.type === 'income' ? 'Thu nh·∫≠p' : 'Chi ti√™u';
    const note = t.note ? ` (${t.note})` : '';
    const id = t.transactionId || t.id; // ƒê·∫£m b·∫£o l·∫•y ƒë∆∞·ª£c ID
    
    return `${idx + 1}. ${date}: ${type} ${amount} - ${category}${note} [ID: ${id}]`;
  }).join('\n');
  
  const result = `T√¨m th·∫•y ${transactions.length} giao d·ªãch:\n\n${formattedTransactions}`;
  return hasMore ? `${result}\n\n... v√† ${transactions.length - maxToShow} giao d·ªãch kh√°c` : result;
}

/**
 * Fallback handler khi Gemini API kh√¥ng kh·∫£ d·ª•ng
 * X·ª≠ l√Ω c√°c l·ªánh ƒë∆°n gi·∫£n d·ª±a tr√™n t·ª´ kh√≥a
 */
async function handleFallback(userId, message) {
  console.log("Using fallback handler for message:", message);
  const messageLower = message.toLowerCase().trim();
  
  try {
    // X·ª≠ l√Ω c√°c l·ªánh x√≥a giao d·ªãch
    if (messageLower.includes("x√≥a giao d·ªãch") || messageLower.match(/xo[a√°]\s+giao\s+d[i·ªã]ch/i)) {
      const deletePattern = /xo[a√°]\s+giao\s+d[i·ªã]ch\s+(\d+)/i;
      const match = message.match(deletePattern);
      
      if (match) {
        const transactionId = match[1];
        try {
          const result = await handleDeleteTransaction(userId, { transactionId });
          if (result.success) {
            return {
              reply: `‚úÖ ƒê√£ x√≥a giao d·ªãch v·ªõi ID ${transactionId} th√†nh c√¥ng.`,
              functionCall: {
                name: "deleteTransaction",
                args: { transactionId },
                result
              }
            };
          } else {
            return {
              reply: `‚ùå Kh√¥ng th·ªÉ x√≥a giao d·ªãch: ${result.message}`
            };
          }
        } catch (error) {
          console.error("Error deleting transaction:", error);
          return { reply: "‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i sau." };
        }
      }
      
      return {
        reply: "ƒê·ªÉ x√≥a giao d·ªãch, vui l√≤ng cung c·∫•p ID c·ªßa giao d·ªãch.\n\nV√≠ d·ª•: x√≥a giao d·ªãch 123"
      };
    }

    // X·ª≠ l√Ω c√°c l·ªánh t·∫°o giao d·ªãch
    else if (messageLower.includes("t·∫°o giao d·ªãch") || 
        messageLower.includes("th√™m giao d·ªãch") || 
        messageLower.includes("t·∫°o transaction")) {
      
      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ch∆∞a
      const createPattern = /t·∫°o\s+giao\s+d·ªãch\s+(thu\s+nh·∫≠p|chi\s+ti√™u)\s+(\d+)\s+([^\s]+)\s+(\d{1,2}-\d{1,2}-\d{4})(?:\s+(.+))?/i;
      const match = message.match(createPattern);
      
      if (match) {
        // ƒê√£ nh·∫≠n ƒë·ªß th√¥ng tin, ph√¢n t√≠ch c√∫ ph√°p
        const type = match[1].toLowerCase().includes('thu') ? 'income' : 'expense';
        const amount = parseFloat(match[2]);
        const categoryName = match[3];
        const date = match[4]; // DD-MM-YYYY
        const note = match[5] || '';
        
        // T√¨m categoryId t·ª´ t√™n danh m·ª•c
        const categories = await getAllCategoriesForContext();
        const category = categories.find(c => c.name.toLowerCase() === categoryName.toLowerCase());
        
        if (!category) {
          return {
            reply: `‚ùå Kh√¥ng t√¨m th·∫•y danh m·ª•c "${categoryName}". Vui l√≤ng ch·ªçn m·ªôt trong c√°c danh m·ª•c sau ho·∫∑c t·∫°o m·ªõi:\n\n${categories.map(c => `- ${c.name}`).join('\n')}`
          };
        }
        
        // G·ªçi API t·∫°o giao d·ªãch
        const result = await handleCreateTransaction(userId, {
          categoryId: category.id,
          type,
          amount,
          date,
          note
        });
        
        if (result.success) {
          const formattedAmount = new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
          return {
            reply: `‚úÖ ƒê√£ t·∫°o giao d·ªãch th√†nh c√¥ng:\n\n${type === 'income' ? 'üìà Thu nh·∫≠p' : 'üìâ Chi ti√™u'} ${formattedAmount}\nüìÜ Ng√†y: ${date}\nüìå Danh m·ª•c: ${categoryName}${note ? '\nüìù Ghi ch√∫: ' + note : ''}`,
            functionCall: {
              name: "createTransaction",
              args: {
                categoryId: category.id,
                type,
                amount,
                date,
                note
              },
              result
            }
          };
        } else {
          return {
            reply: `‚ùå Kh√¥ng th·ªÉ t·∫°o giao d·ªãch: ${result.message}`
          };
        }
      }
      
      // N·∫øu ch∆∞a ƒë·ªß th√¥ng tin, hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
      return {
        reply: "üìù T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o giao d·ªãch. Vui l√≤ng cung c·∫•p th√¥ng tin theo ƒë·ªãnh d·∫°ng: \n\n*t·∫°o giao d·ªãch [thu nh·∫≠p/chi ti√™u] [s·ªë ti·ªÅn] [danh m·ª•c] [ng√†y DD-MM-YYYY] [ghi ch√∫]*.\n\nV√≠ d·ª•: t·∫°o giao d·ªãch thu nh·∫≠p 500000 L∆∞∆°ng 15-05-2024 L∆∞∆°ng th√°ng 5"
      };
    }
    
    // X·ª≠ l√Ω l·ªánh t√¨m ki·∫øm giao d·ªãch
    else if (messageLower.includes("t√¨m giao d·ªãch") || 
             messageLower.includes("xem giao d·ªãch") ||
             messageLower.includes("t√¨m transaction")) {
      
      // T√¨m t·ª´ ng√†y n√†o ƒë·∫øn ng√†y n√†o
      let startDate, endDate;
      
      // X·ª≠ l√Ω ƒë∆°n gi·∫£n: n·∫øu c√≥ "th√°ng n√†y" th√¨ l·∫•y giao d·ªãch th√°ng hi·ªán t·∫°i
      if (messageLower.includes("th√°ng n√†y")) {
        const now = new Date();
        const year = now.getFullYear();
        const month = now.getMonth() + 1;
        
        try {
          const result = await transactionService.searchTransactions(userId, {
            startDate: `01-${month.toString().padStart(2, '0')}-${year}`,
            endDate: `${new Date(year, month, 0).getDate()}-${month.toString().padStart(2, '0')}-${year}`,
            page: 1,
            limit: 10
          });
          
          if (result && result.data && result.data.length > 0) {
            const formatted = formatTransactionsForChat(result.data);
            return {
              reply: formatted,
              functionCall: {
                name: "searchTransactions",
                args: {
                  startDate: `01-${month.toString().padStart(2, '0')}-${year}`,
                  endDate: `${new Date(year, month, 0).getDate()}-${month.toString().padStart(2, '0')}-${year}`
                },
                result: {
                  success: true,
                  message: `T√¨m th·∫•y ${result.data.length} giao d·ªãch`,
                  transactions: result.data,
                  pagination: result.pagination
                }
              }
            };
          }
          
          return {
            reply: "üîç Kh√¥ng t√¨m th·∫•y giao d·ªãch n√†o trong th√°ng n√†y."
          };
          
        } catch (error) {
          console.error("Fallback search error:", error);
          return { reply: "‚ùå Kh√¥ng th·ªÉ t√¨m ki·∫øm giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i sau." };
        }
      }
      
      return {
        reply: "üîç T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m giao d·ªãch. H√£y th·ª≠ c√°c l·ªánh nh∆∞:\n\n- T√¨m giao d·ªãch th√°ng n√†y\n- T√¨m giao d·ªãch thu nh·∫≠p\n- T√¨m giao d·ªãch chi ti√™u"
      };
    }
    
    // X·ª≠ l√Ω l·ªánh danh m·ª•c
    else if (messageLower.includes("danh m·ª•c") || messageLower.includes("category")) {
      // Ki·ªÉm tra l·ªánh t·∫°o danh m·ª•c m·ªõi
      const createCategoryPattern = /t·∫°o\s+danh\s+m·ª•c\s+(.+)/i;
      const match = message.match(createCategoryPattern);
      
      if (match) {
        const categoryName = match[1].trim();
        try {
          const result = await handleCreateCategory({ name: categoryName });
          if (result.success) {
            return {
              reply: `‚úÖ ƒê√£ t·∫°o danh m·ª•c "${categoryName}" th√†nh c√¥ng.`,
              functionCall: {
                name: "createCategory",
                args: { name: categoryName },
                result
              }
            };
          } else {
            return {
              reply: `‚ùå Kh√¥ng th·ªÉ t·∫°o danh m·ª•c: ${result.message}`
            };
          }
        } catch (error) {
          console.error("Error creating category:", error);
          return { reply: "‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i sau." };
        }
      }
      
      // Hi·ªÉn th·ªã danh s√°ch danh m·ª•c
      try {
        const categories = await getAllCategoriesForContext();
        const formattedCategories = categories.map(cat => `üìå ${cat.name}`).join('\n');
        return {
          reply: `üìã *Danh s√°ch danh m·ª•c:*\n\n${formattedCategories}\n\nB·∫°n c√≥ th·ªÉ t·∫°o danh m·ª•c m·ªõi b·∫±ng c√°ch nh·∫≠p: *t·∫°o danh m·ª•c [t√™n danh m·ª•c]*`
        };
      } catch (error) {
        console.error("Error fetching categories:", error);
        return { reply: "‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i sau." };
      }
    }
    
    // X·ª≠ l√Ω l·ªánh tr·ª£ gi√∫p
    else if (messageLower.includes("tr·ª£ gi√∫p") || messageLower.includes("help") || messageLower.includes("h∆∞·ªõng d·∫´n")) {
      return {
        reply: `üìö *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng chatbot:*\n\n1Ô∏è‚É£ *T·∫°o giao d·ªãch m·ªõi:*\n   t·∫°o giao d·ªãch [thu nh·∫≠p/chi ti√™u] [s·ªë ti·ªÅn] [danh m·ª•c] [ng√†y DD-MM-YYYY] [ghi ch√∫]\n\n2Ô∏è‚É£ *T√¨m ki·∫øm giao d·ªãch:*\n   t√¨m giao d·ªãch th√°ng n√†y\n\n3Ô∏è‚É£ *Xem danh s√°ch danh m·ª•c:*\n   danh m·ª•c\n\n4Ô∏è‚É£ *T·∫°o danh m·ª•c m·ªõi:*\n   t·∫°o danh m·ª•c [t√™n danh m·ª•c]\n\n5Ô∏è‚É£ *X√≥a giao d·ªãch:*\n   x√≥a giao d·ªãch [ID giao d·ªãch]`
      };
    }
    
    // Tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh
    return {
      reply: "Xin l·ªói, d·ªãch v·ª• AI hi·ªán ƒëang qu√° t·∫£i. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n th·ª±c hi·ªán c√°c t√°c v·ª• c∆° b·∫£n nh∆∞:\n\n- T·∫°o giao d·ªãch\n- T√¨m giao d·ªãch trong th√°ng n√†y\n- Xem danh s√°ch danh m·ª•c\n- T·∫°o danh m·ª•c m·ªõi\n- X√≥a giao d·ªãch\n\nNh·∫≠p 'tr·ª£ gi√∫p' ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt."
    };
  } catch (error) {
    console.error("Fallback handler error:", error);
    return {
      reply: "‚ùå Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c s·ª≠ d·ª•ng giao di·ªán th√¥ng th∆∞·ªùng c·ªßa ·ª©ng d·ª•ng."
    };
  }
}

/**
 * X·ª≠ l√Ω chat v·ªõi Gemini AI
 */
async function processChat(userId, message) {
  try {
    // L·∫•y danh s√°ch c√°c danh m·ª•c ƒë·ªÉ cung c·∫•p cho Gemini
    const categories = await getAllCategoriesForContext();
    
    // Chu·∫©n b·ªã system prompt
    const systemPrompt = `
B·∫°n l√† tr·ª£ l√Ω AI h·ªó tr·ª£ qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n. B·∫°n c√≥ kh·∫£ nƒÉng gi√∫p ng∆∞·ªùi d√πng t·∫°o, xem, s·ª≠a v√† x√≥a c√°c giao d·ªãch t√†i ch√≠nh. 
H√£y tr·∫£ l·ªùi m·ªôt c√°ch ng·∫Øn g·ªçn, chuy√™n nghi·ªáp v√† th√¢n thi·ªán.

TH√îNG TIN QUAN TR·ªåNG:
1. Danh s√°ch c√°c danh m·ª•c hi·ªán c√≥: ${JSON.stringify(categories)}
2. N·∫øu ng∆∞·ªùi d√πng mu·ªën t·∫°o giao d·ªãch v·ªõi danh m·ª•c kh√¥ng c√≥ trong danh s√°ch, h√£y ƒë·ªÅ ngh·ªã h·ªç t·∫°o danh m·ª•c m·ªõi tr∆∞·ªõc.
3. Khi ng∆∞·ªùi d√πng y√™u c·∫ßu t·∫°o giao d·ªãch, b·∫°n c·∫ßn h·ªèi c√°c th√¥ng tin: lo·∫°i giao d·ªãch (thu nh·∫≠p/chi ti√™u), s·ªë ti·ªÅn, danh m·ª•c, ng√†y v√† ghi ch√∫ (kh√¥ng b·∫Øt bu·ªôc).
4. Khi x·ª≠ l√Ω ng√†y th√°ng, h√£y chuy·ªÉn ƒë·ªïi th√†nh ƒë·ªãnh d·∫°ng "DD-MM-YYYY" ƒë·ªÉ ph√π h·ª£p v·ªõi API.
5. N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu th√¥ng tin kh√¥ng r√µ r√†ng, h√£y h·ªèi th√™m ƒë·ªÉ l√†m r√µ.
`;

    console.log("Setting up Gemini model (gemini-2.0-flash)");
    
    try {
      // Th·ª≠ s·ª≠ d·ª•ng Gemini API
      // Kh·ªüi t·∫°o model gemini-2.0-flash (phi√™n b·∫£n m·ªõi)
      const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
  
      // T·∫°o c√°c tool definitions cho function calling
      const tools = [
        {
          functionDeclarations: [
            {
              name: "createTransaction",
              description: "T·∫°o m·ªôt giao d·ªãch m·ªõi",
              parameters: {
                type: "object",
                properties: {
                  categoryId: {
                    type: "string",
                    description: "ID c·ªßa danh m·ª•c"
                  },
                  type: {
                    type: "string",
                    enum: ["income", "expense"],
                    description: "Lo·∫°i giao d·ªãch: thu nh·∫≠p ho·∫∑c chi ti√™u"
                  },
                  amount: {
                    type: "number",
                    description: "S·ªë ti·ªÅn c·ªßa giao d·ªãch (s·ªë d∆∞∆°ng)"
                  },
                  date: {
                    type: "string",
                    description: "Ng√†y giao d·ªãch, ƒë·ªãnh d·∫°ng DD-MM-YYYY"
                  },
                  note: {
                    type: "string",
                    description: "Ghi ch√∫ v·ªÅ giao d·ªãch (kh√¥ng b·∫Øt bu·ªôc)"
                  }
                },
                required: ["categoryId", "type", "amount", "date"]
              }
            },
            {
              name: "searchTransactions",
              description: "T√¨m ki·∫øm giao d·ªãch theo c√°c ti√™u ch√≠",
              parameters: {
                type: "object",
                properties: {
                  startDate: {
                    type: "string",
                    description: "Ng√†y b·∫Øt ƒë·∫ßu t√¨m ki·∫øm, ƒë·ªãnh d·∫°ng DD-MM-YYYY"
                  },
                  endDate: {
                    type: "string", 
                    description: "Ng√†y k·∫øt th√∫c t√¨m ki·∫øm, ƒë·ªãnh d·∫°ng DD-MM-YYYY"
                  },
                  type: {
                    type: "string",
                    enum: ["income", "expense"],
                    description: "Lo·∫°i giao d·ªãch: thu nh·∫≠p ho·∫∑c chi ti√™u"
                  },
                  categoryId: {
                    type: "string",
                    description: "ID c·ªßa danh m·ª•c"
                  },
                  minAmount: {
                    type: "number",
                    description: "S·ªë ti·ªÅn t·ªëi thi·ªÉu"
                  },
                  maxAmount: {
                    type: "number",
                    description: "S·ªë ti·ªÅn t·ªëi ƒëa"
                  },
                  keyword: {
                    type: "string",
                    description: "T·ª´ kh√≥a t√¨m ki·∫øm trong ghi ch√∫"
                  }
                }
              }
            },
            {
              name: "updateTransaction",
              description: "C·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt giao d·ªãch",
              parameters: {
                type: "object",
                properties: {
                  transactionId: {
                    type: "string",
                    description: "ID c·ªßa giao d·ªãch c·∫ßn c·∫≠p nh·∫≠t"
                  },
                  updates: {
                    type: "object",
                    description: "C√°c tr∆∞·ªùng c·∫ßn c·∫≠p nh·∫≠t",
                    properties: {
                      categoryId: {
                        type: "string",
                        description: "ID c·ªßa danh m·ª•c m·ªõi"
                      },
                      type: {
                        type: "string",
                        enum: ["income", "expense"],
                        description: "Lo·∫°i giao d·ªãch: thu nh·∫≠p ho·∫∑c chi ti√™u"
                      },
                      amount: {
                        type: "number",
                        description: "S·ªë ti·ªÅn m·ªõi c·ªßa giao d·ªãch (s·ªë d∆∞∆°ng)"
                      },
                      date: {
                        type: "string",
                        description: "Ng√†y giao d·ªãch m·ªõi, ƒë·ªãnh d·∫°ng DD-MM-YYYY"
                      },
                      note: {
                        type: "string",
                        description: "Ghi ch√∫ m·ªõi v·ªÅ giao d·ªãch"
                      }
                    }
                  }
                },
                required: ["transactionId", "updates"]
              }
            },
            {
              name: "deleteTransaction",
              description: "X√≥a m·ªôt giao d·ªãch",
              parameters: {
                type: "object",
                properties: {
                  transactionId: {
                    type: "string",
                    description: "ID c·ªßa giao d·ªãch c·∫ßn x√≥a"
                  }
                },
                required: ["transactionId"]
              }
            },
            {
              name: "createCategory",
              description: "T·∫°o m·ªôt danh m·ª•c m·ªõi",
              parameters: {
                type: "object",
                properties: {
                  name: {
                    type: "string",
                    description: "T√™n c·ªßa danh m·ª•c m·ªõi"
                  }
                },
                required: ["name"]
              }
            }
          ]
        }
      ];
  
      console.log("Sending request to Gemini API");
  
      // C·∫•u tr√∫c y√™u c·∫ßu m·ªõi theo API m·ªõi nh·∫•t
      const request = {
        contents: [
          {
            role: "user",
            parts: [{ text: systemPrompt }]
          },
          {
            role: "model",
            parts: [{ text: "T√¥i ƒë√£ hi·ªÉu. T√¥i s·∫Ω h·ªó tr·ª£ ng∆∞·ªùi d√πng v·ªõi c√°c giao d·ªãch t√†i ch√≠nh theo h∆∞·ªõng d·∫´n. T√¥i s·∫Ω s·ª≠ d·ª•ng c√°c h√†m ƒë√£ ƒë·ªãnh nghƒ©a khi c·∫ßn thi·∫øt." }]
          },
          {
            role: "user",
            parts: [{ text: message }]
          }
        ],
        tools: tools,
        generationConfig: {
          temperature: 0.2,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        }
      };
  
      // G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API v·ªõi timeout 10 gi√¢y
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error("Gemini API timeout")), 10000)
      );
      
      const result = await Promise.race([
        model.generateContent(request),
        timeoutPromise
      ]);
      
      console.log("Received response from Gemini API");
  
      // Truy c·∫≠p ph·∫£n h·ªìi
      const response = result.response;
      const responseText = response.text();
      
      // X·ª≠ l√Ω function call n·∫øu c√≥
      if (response.functionCalls && response.functionCalls().length > 0) {
        const functionCall = response.functionCalls()[0]; // L·∫•y function call ƒë·∫ßu ti√™n
        const functionName = functionCall.name;
        const functionArgs = JSON.parse(functionCall.args);
        
        console.log(`Function called: ${functionName}`, functionArgs);
        
        let functionResult;
        
        // X·ª≠ l√Ω t·ª´ng lo·∫°i function call
        switch (functionName) {
          case 'createTransaction':
            functionResult = await handleCreateTransaction(userId, functionArgs);
            break;
          
          case 'searchTransactions':
            functionResult = await handleSearchTransactions(userId, functionArgs);
            break;
          
          case 'updateTransaction':
            functionResult = await handleUpdateTransaction(userId, functionArgs);
            break;
          
          case 'deleteTransaction':
            functionResult = await handleDeleteTransaction(userId, functionArgs);
            break;
          
          case 'createCategory':
            functionResult = await handleCreateCategory(functionArgs);
            break;
          
          default:
            functionResult = { error: `Kh√¥ng h·ªó tr·ª£ h√†m ${functionName}` };
        }
        
        // Ph·∫£n h·ªìi bao g·ªìm c·∫£ k·∫øt qu·∫£ c·ªßa function call v√† text
        return {
          reply: responseText,
          functionCall: {
            name: functionName,
            args: functionArgs,
            result: functionResult
          }
        };
      }
      
      // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ function call n√†o, ch·ªâ tr·∫£ v·ªÅ text
      return { reply: responseText };
    } catch (geminiError) {
      // N·∫øu Gemini API l·ªói, ghi log v√† s·ª≠ d·ª•ng fallback
      console.error('Error with Gemini API:', geminiError);
      console.log('Switching to fallback handler');
      return await handleFallback(userId, message);
    }

  } catch (error) {
    console.error('Error processing chat:', error);
    throw new Error(`Kh√¥ng th·ªÉ x·ª≠ l√Ω tin nh·∫Øn: ${error.message}`);
  }
}

/**
 * X·ª≠ l√Ω t·∫°o giao d·ªãch
 */
async function handleCreateTransaction(userId, args) {
  try {
    const { categoryId, type, amount, date, note } = args;
    const result = await transactionService.create(
      userId, 
      categoryId, 
      type, 
      amount, 
      date, 
      note || ''
    );
    return {
      success: true,
      message: 'Giao d·ªãch ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
      transaction: result
    };
  } catch (error) {
    console.error('Error creating transaction:', error);
    return {
      success: false,
      message: error.message || 'Kh√¥ng th·ªÉ t·∫°o giao d·ªãch'
    };
  }
}

/**
 * X·ª≠ l√Ω t√¨m ki·∫øm giao d·ªãch
 */
async function handleSearchTransactions(userId, args) {
  try {
    const result = await transactionService.searchTransactions(userId, args);
    return {
      success: true,
      message: `T√¨m th·∫•y ${result.data?.length || 0} giao d·ªãch`,
      transactions: result.data,
      pagination: result.pagination
    };
  } catch (error) {
    console.error('Error searching transactions:', error);
    return {
      success: false,
      message: error.message || 'Kh√¥ng th·ªÉ t√¨m ki·∫øm giao d·ªãch'
    };
  }
}

/**
 * X·ª≠ l√Ω c·∫≠p nh·∫≠t giao d·ªãch
 */
async function handleUpdateTransaction(userId, args) {
  try {
    const { transactionId, updates } = args;
    const result = await transactionService.updateTransaction(
      transactionId, 
      userId, 
      updates
    );
    return {
      success: true,
      message: 'Giao d·ªãch ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng',
      transaction: result
    };
  } catch (error) {
    console.error('Error updating transaction:', error);
    return {
      success: false,
      message: error.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t giao d·ªãch'
    };
  }
}

/**
 * X·ª≠ l√Ω x√≥a giao d·ªãch
 */
async function handleDeleteTransaction(userId, args) {
  try {
    const { transactionId } = args;
    const result = await transactionService.deleteTransaction(transactionId);
    return {
      success: true,
      message: 'Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng'
    };
  } catch (error) {
    console.error('Error deleting transaction:', error);
    return {
      success: false,
      message: error.message || 'Kh√¥ng th·ªÉ x√≥a giao d·ªãch'
    };
  }
}

/**
 * X·ª≠ l√Ω t·∫°o danh m·ª•c
 */
async function handleCreateCategory(args) {
  try {
    const { name } = args;
    const result = await categoryService.create(name);
    return {
      success: true,
      message: 'Danh m·ª•c ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
      category: result
    };
  } catch (error) {
    console.error('Error creating category:', error);
    return {
      success: false,
      message: error.message || 'Kh√¥ng th·ªÉ t·∫°o danh m·ª•c'
    };
  }
}

module.exports = {
  processChat
}; 